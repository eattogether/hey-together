plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.10'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'com.palantir.docker' version '0.22.1'
    id 'com.moowork.node' version '1.3.1'
}

group = 'com.eattogether'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    acceptanceTestImplementation
}

repositories {
    mavenCentral()
}


ext {
    set('snippetsDir', file("build/generated-snippets"))
}


dependencies {
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.auth0:java-jwt:3.8.3'
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    acceptanceTestImplementation 'com.google.code.gson:gson:2.8.6'
    acceptanceTestImplementation 'com.auth0:java-jwt:3.8.3'
    acceptanceTestImplementation 'com.h2database:h2'
    acceptanceTestImplementation 'mysql:mysql-connector-java'
    acceptanceTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    acceptanceTestImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    acceptanceTestImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    acceptanceTestImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    acceptanceTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    println "=====start asciidoctor"
    //asciidoctor 실행전 기존에 생성된 API 문서 삭제
    delete file('src/main/resources/static/docs')
}
asciidoctor.doLast {
    println "=====finish asciidoctor"
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into "BOOT-INF/classes/static/docs"
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/asciidoc/html5")
    // resources/static/docs 로 복사하여 서버가 돌아가고 있을때 /docs/index.html 로 접속하면 볼수 있음
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

sourceSets {
    acceptanceTest {
        java.srcDir file('src/acceptanceTest/java')
        resources.srcDir file('src/acceptanceTest/resources')
        compileClasspath += main.output + test.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

apply plugin: 'com.moowork.node'

node {
    version = '12.13.1'
    npmVersion = '6.12.1'
    workDir = file("./src/frontend")
    npmWorkDir = file("./src/frontend")
    nodeModulesDir = file("./src/frontend")
}

task setUp(type: NpmTask) {
    description = "Install Node.js packages"
    args = ['install']
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task buildFrontEnd(type: NpmTask, dependsOn: setUp) {
    description = "Build vue.js"
    args = ['run', 'build']
}


processResources.dependsOn 'buildFrontEnd'